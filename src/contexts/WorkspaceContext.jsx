// ‚úÖ WorkspaceContext.jsx ‚Äì Gi·ªëng Trello: ch·ªâ fetch workspace, KH√îNG t·∫°o ·ªü frontend n·ªØa
import React, { createContext, useState, useEffect } from 'react';
import * as workspaceApi from '../api/workspaceApi';

export const WorkspaceContext = createContext();

export function WorkspaceProvider({ children }) {
  const [workspaces, setWorkspaces] = useState([]);
  const [currentWorkspaceId, setCurrentWorkspaceId] = useState(null);
  const [loadingWorkspaces, setLoadingWorkspaces] = useState(true);
  const [searchNav, setSearchNav] = useState('');

  useEffect(() => {
    const loadWorkspaces = async () => {
      try {
        const res = await workspaceApi.fetchWorkspaces();
        const list = res.data;
        console.log('üì¶ Workspaces fetched:', list);

        if (list.length > 0) {
          setWorkspaces(list);
          setCurrentWorkspaceId(list[0].id);
          console.log('‚úÖ currentWorkspaceId =', list[0].id);
        } else {
          console.error('‚ùå Kh√¥ng t√¨m th·∫•y workspace n√†o, m·∫∑c d√π backend ƒë√£ t·∫°o m·∫∑c ƒë·ªãnh.');
        }
      } catch (err) {
        console.error('‚ùå L·ªói khi load workspace:', err);
      } finally {
        setLoadingWorkspaces(false);
      }
    };

    loadWorkspaces();
  }, []);

  return (
    <WorkspaceContext.Provider
      value={{
        workspaces,
        currentWorkspaceId,
        setCurrentWorkspaceId,
        searchNav,
        setSearchNav,
        loadingWorkspaces,
      }}
    >
      {children}
    </WorkspaceContext.Provider>
  );
}